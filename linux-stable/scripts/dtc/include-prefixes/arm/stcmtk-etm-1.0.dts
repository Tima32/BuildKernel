/*
 * Copyright (C) 2016 Freescale Semiconductor, Inc.
 * Copyright 2017 NXP
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 */

/dts-v1/;

#include <dt-bindings/input/input.h>
#include "imx6ull.dtsi"

/ {
	model = "stcmtk,etm-1.0";
	compatible = "stcmtk,etm", "fsl,imx6ull";

	chosen {
		stdout-path = &uart1;
	};

	memory {
		reg = <0x80000000 0x20000000>;
	};

	reserved-memory {
		#address-cells = <1>;
		#size-cells = <1>;
		ranges;

		linux,cma {
			compatible = "shared-dma-pool";
			reusable;
			size = <0x6000000>;
			linux,cma-default;
		};
	};

	regulators {
		compatible = "simple-bus";
		#address-cells = <1>;
		#size-cells = <0>;

		reg_sd1: sd1@0 {
			compatible = "regulator-fixed";
			regulator-name = "SD1_PWR_STUB";
			regulator-min-microvolt = <3300000>;
			regulator-max-microvolt = <3300000>;
			regulator-always-on;
		};

		reg_vref_adc: vref_adc@1 {
			compatible = "regulator-fixed";
			regulator-name = "ADC_REF_STUB";
			/* This regulator is used for ETM battery ADC reference
			 * voltage representing. ADC measures battery voltage
			 * behind the voltage divider with factor = 5.7. So
			 * real battery voltage equals ADC voltage * 5.7, and
			 * max ADC voltage is 3.3 * 5.7 = 18.81
			 */
			regulator-min-microvolt = <18810000>;
			regulator-max-microvolt = <18810000>;
			regulator-always-on;
		};

		reg_fpga_vcc: fpga0@2 {
			pinctrl-names = "default";
			pinctrl-0 = <&pinctrl_fpga0_pwr>;
			compatible = "regulator-fixed";
			regulator-name = "FPGA_3V3_REG";
			regulator-type = "voltage";
			regulator-min-microvolt = <3300000>;
			regulator-max-microvolt = <3300000>;
			enable-active-high;
			gpio = <&gpio4 10 GPIO_ACTIVE_HIGH>;
		};

		reg_dvfs: reg@4 {
			compatible = "regulator-gpio";
			pinctrl-names = "default";
			pinctrl-0 = <&pinctrl_dvfs>;
			regulator-name = "gpio_dvfs";
			regulator-type = "voltage";
			regulator-min-microvolt = <1300000>;
			regulator-max-microvolt = <1400000>;
			gpios = <&gpio5 3 GPIO_ACTIVE_HIGH>;
			states = <1300000 0x1
			          1400000 0x0>;
		};
	};

	beeper {
		compatible = "pwm-beeper";
		status = "okay";
		pwms = <&pwm1>;
	};

	backlight {
		pinctrl-names = "default";
		pinctrl-0 = <&pinctrl_backlight>;
		compatible = "gpio-backlight";
		status = "okay";
		gpios = <&gpio3 13 GPIO_ACTIVE_HIGH>;
		default-on;
	};

	gpio-poweroff {
		pinctrl-names = "default";
		pinctrl-0 = <&pinctrl_poweroff>;
		compatible = "gpio-poweroff";
		status = "okay";
		gpios = <&gpio4 13 GPIO_ACTIVE_HIGH>;
	};

	lcd {
		compatible = "melt,mt-12232a";
		pinctrl-names = "default";
		pinctrl-0 = <&pinctrl_lcd>;
		data-bus-gpios = <&gpio3 0  GPIO_ACTIVE_HIGH   /* DB0   */
		                  &gpio3 1  GPIO_ACTIVE_HIGH   /* DB1   */
		                  &gpio3 2  GPIO_ACTIVE_HIGH   /* DB2   */
		                  &gpio3 3  GPIO_ACTIVE_HIGH   /* DB3   */
		                  &gpio3 5  GPIO_ACTIVE_HIGH   /* DB4   */
		                  &gpio3 6  GPIO_ACTIVE_HIGH   /* DB5   */
		                  &gpio3 7  GPIO_ACTIVE_HIGH   /* DB6   */
		                  &gpio3 8  GPIO_ACTIVE_HIGH>; /* DB7   */
		reset-gpios    = <&gpio3 14 GPIO_ACTIVE_HIGH>; /* RESET */
		cs-gpios       = <&gpio3 12 GPIO_ACTIVE_HIGH>; /* CS    */
		estr-gpios     = <&gpio3 11 GPIO_ACTIVE_HIGH>; /* ESTR  */
		rdwr-gpios     = <&gpio3 10 GPIO_ACTIVE_HIGH>; /* RDWR  */
		a0-gpios       = <&gpio3 9  GPIO_ACTIVE_HIGH>; /* A0    */
		status = "okay";
	};

	gpio-exporter {
		compatible = "linux,gpio-exporter";
		status = "okay";
		exported-gpios = <&gpio4 15 GPIO_ACTIVE_HIGH>,
				 <&gpio4 12 GPIO_ACTIVE_HIGH>,
				 <&gpio3 16 GPIO_ACTIVE_HIGH>;
		exported-gpio-names = "mcu-boot", "mcu-pwr-en", "poe-gpio";
		exported-gpio-directions = "low", "high", "low";
	};

	bat_info: battery_info {
		compatible = "simple-battery";
		voltage-min-design-microvolt = <6200000>;
		charge-full-design-microamp-hours = <2600000>;
		constant_charge_voltage_max_microvolt = <8400000>;
	};

	battery_gauge {
		compatible = "stcmtk,etm-battery";
		monitored-battery = <&bat_info>;
		io-channels = <&adc1 5>;
		io-channel-names = "voltage";
		charge-detect-voltage-microvolt = <10000000>;
	};
};

&cpu0 {
	/*
	 * on i.MX6ULL, no seperated VDD_ARM_IN and VDD_SOC_IN,
	 * to align with other platform and use the same cpufreq
	 * driver, still use the seperated OPP define for arm
	 * and soc.
	 */
	operating-points = <
		/* kHz  uV */
		528000  1175000
		396000  1025000
		198000  950000
	>;
	fsl,soc-operating-points = <
		/* KHz  uV */
		528000  1175000
		396000  1175000
		198000  1175000
	>;
	fsl,low-power-run;
	fsl,arm-soc-shared = <0>;
	clock-frequency = <528000000>;
	dc-supply = <&reg_dvfs>;
};

&kpp {
	pinctrl-names = "default","sleep","idle","init";
	pinctrl-0 = <&pinctrl_kpp>;
	pinctrl-1 = <&pinctrl_kpp>;
	pinctrl-2 = <&pinctrl_kpp>;
	pinctrl-3 = <&pinctrl_kpp>;
	linux,autorepeat-delay = <500>; /* miliseconds */
	linux,autorepeat-period = <50>; /* miliseconds */
	linux,keymap = <
			MATRIX_KEY(4, 5, KEY_KPASTERISK)
			MATRIX_KEY(0, 5, KEY_7)
			MATRIX_KEY(5, 5, KEY_4)
			MATRIX_KEY(6, 5, KEY_1)
			MATRIX_KEY(7, 5, KEY_HOME)
			MATRIX_KEY(5, 4, KEY_LEFT)
			MATRIX_KEY(5, 0, KEY_ESC)
			MATRIX_KEY(4, 6, KEY_0)
			MATRIX_KEY(0, 6, KEY_8)
			MATRIX_KEY(5, 6, KEY_5)
			MATRIX_KEY(6, 6, KEY_2)
			MATRIX_KEY(7, 6, KEY_DOWN)
			MATRIX_KEY(6, 4, KEY_UP)
			MATRIX_KEY(4, 7, KEY_GRAVE)
			MATRIX_KEY(0, 7, KEY_9)
			MATRIX_KEY(5, 7, KEY_6)
			MATRIX_KEY(6, 7, KEY_3)
			MATRIX_KEY(7, 7, KEY_END)
			MATRIX_KEY(7, 4, KEY_RIGHT)
			MATRIX_KEY(7, 0, KEY_ENTER)
	>;
	clocks = <&clks IMX6UL_CLK_KPP>;
	status = "okay";
};

&fec1 {
	pinctrl-names = "default";
	pinctrl-0 = <&pinctrl_enet1 &pinctrl_ethphy0 &pinctrl_mdio0>;
	phy-mode = "rmii";
	phy-handle = <&ethphy0>;
	phy-reset-gpios = <&gpio4 14 GPIO_ACTIVE_HIGH>;
	local-mac-address = [00 21 ce 65 46 37];
	status = "okay";

	mdio {
		#address-cells = <1>;
		#size-cells = <0>;

		ethphy0: ethernet-phy@0 {
			compatible = "ethernet-phy-ieee802.3-c22";
			reg = <0>;
		};
	};
};

&gpc {
	fsl,cpu_pupscr_sw2iso = <0xf>;
	fsl,cpu_pupscr_sw = <0x0>;
	fsl,cpu_pdnscr_iso2sw = <0x1>;
	fsl,cpu_pdnscr_iso = <0x1>;
	fsl,ldo-bypass = <0>; /* DCDC, ldo-enable */
};

&ecspi1 {
	pinctrl-names = "default";
	pinctrl-0 = <&pinctrl_ecspi1>;
	clock-frequency = <20000000>;
	status = "okay";
	fsl,spi-num-chipselects = <1>;
	/* Actually there is no CS muxed to the pin  because we need to
	 * drive CS manually from the Lattice ECP5 FPGA driver
	 * see pinmux definition for details
	 */
	cs-gpios = <0>;

	ecp5: ecp5@0 {
	        pinctrl-names = "default";
	        pinctrl-0 = <&pinctrl_ecp5 &pinctrl_ecp5_spi_cs>;
		compatible = "lattice,ecp5-fpga-mgr";
		status = "okay";
		spi-max-frequency = <20000000>;
		reg = <0>;
		cs-gpios = <&gpio3 26 GPIO_ACTIVE_LOW>;
		done-gpios = <&gpio3 21 GPIO_ACTIVE_HIGH>;
		programn-gpios = <&gpio3 23 GPIO_ACTIVE_LOW>;
		initn-gpios = <&gpio3 22 GPIO_ACTIVE_LOW>;
	};
};

&i2c1 {
	clock-frequency = <100000>;
	pinctrl-names = "default";
	pinctrl-0 = <&pinctrl_i2c1>;
	status = "okay";

	eeprom@57 {
		pinctrl-names = "default";
		pinctrl-0 = <&pinctrl_eeprom1>;
		compatible = "atmel,24c02";
		reg = <0x57>;
		pagesize = <16>;
	};
};

&i2c2 {
	clock-frequency = <100000>;
	pinctrl-names = "default";
	pinctrl-0 = <&pinctrl_i2c2>;
	status = "okay";
};

&iomuxc {
	pinctrl-names = "default";
	pinctrl-0 = <&pinctrl_hog_1>;
	stcmtk-lan-tester {
		pinctrl_hog_1: hoggrp-1 {
			fsl,pins = <
				/* JTAG */
				MX6UL_PAD_JTAG_MOD__SJC_MOD               0x0000B0A0
				MX6UL_PAD_JTAG_TCK__SJC_TCK               0x000070A0
				MX6UL_PAD_JTAG_TDI__SJC_TDI               0x000070A0
				MX6UL_PAD_JTAG_TDO__SJC_TDO               0x000090B1
				MX6UL_PAD_JTAG_TMS__SJC_TMS               0x000070A0
				MX6UL_PAD_JTAG_TRST_B__SJC_TRSTB          0x000070A0

				/* FPGA */
				MX6UL_PAD_GPIO1_IO02__SDMA_EXT_EVENT00    0x000010B0 /* SDMA INT */
				MX6UL_PAD_LCD_DATA12__GPIO3_IO17          0x000010B0 /* FPGA_INT_1 */
				MX6UL_PAD_LCD_DATA13__GPIO3_IO18          0x000010B0 /* FPGA_INT_2 */
				MX6UL_PAD_LCD_DATA14__GPIO3_IO19          0x000010B0 /* FPGA_INT_3 */
				MX6UL_PAD_LCD_DATA15__GPIO3_IO20          0x000010B0 /* FPGA_INT_4 */

				MX6UL_PAD_LCD_DATA19__GPIO3_IO24          0x000010B0 /* GSRN - FPGA RESET */

				/* CABLE TESTING - STM32 MCU */
				MX6UL_PAD_NAND_CLE__GPIO4_IO15            0x000010B0 /* MCU_BOOT */
				MX6UL_PAD_NAND_READY_B__GPIO4_IO12        0x000010B0 /* LAN_TESTER_PWR_EN */
				MX6UL_PAD_LCD_DATA11__GPIO3_IO16          0x000010B0 /* POE_CLASS4_EN */

				/* WLAN - ESP8266 */
				MX6UL_PAD_UART2_CTS_B__GPIO1_IO22         0x000010B0 /* WLESS_FLASH_PROG */
				MX6UL_PAD_UART2_RTS_B__GPIO1_IO23         0x000010B0 /* WLESS_RESET */
				MX6UL_PAD_UART3_CTS_B__GPIO1_IO26         0x000010B0 /* WLESS_PWR_EN */
			>;
		};

		pinctrl_poweroff: poweroffgrp {
			fsl,pins = <
				/* GPIO POWEROFF (suicide) */
				MX6UL_PAD_NAND_CE0_B__GPIO4_IO13          0x000010B0 /* SW_OFF */
			>;
		};

		pinctrl_backlight: backlightgrp {
			fsl,pins = <
				MX6UL_PAD_LCD_DATA08__GPIO3_IO13          0x000010B0 /* BACKLIGHT_ON */
			>;
		};

		pinctrl_weim: weimgrp {
			fsl,pins = <
				MX6UL_PAD_CSI_DATA00__EIM_AD00            0x000010E9
				MX6UL_PAD_CSI_DATA01__EIM_AD01            0x000010E9
				MX6UL_PAD_CSI_DATA02__EIM_AD02            0x000010E9
				MX6UL_PAD_CSI_DATA03__EIM_AD03            0x000010E9
				MX6UL_PAD_CSI_DATA04__EIM_AD04            0x000010E9
				MX6UL_PAD_CSI_DATA05__EIM_AD05            0x000010E9
				MX6UL_PAD_CSI_DATA06__EIM_AD06            0x000010E9
				MX6UL_PAD_CSI_DATA07__EIM_AD07            0x000010E9
				MX6UL_PAD_CSI_HSYNC__EIM_LBA_B            0x000010E9
				MX6UL_PAD_CSI_MCLK__EIM_CS0_B             0x000010E9
				MX6UL_PAD_CSI_PIXCLK__EIM_OE              0x000010E9
				MX6UL_PAD_CSI_VSYNC__EIM_RW               0x000010E9
				MX6UL_PAD_NAND_DATA00__EIM_AD08           0x000010E9
				MX6UL_PAD_NAND_DATA01__EIM_AD09           0x000010E9
				MX6UL_PAD_NAND_DATA02__EIM_AD10           0x000010E9
				MX6UL_PAD_NAND_DATA03__EIM_AD11           0x000010E9
				MX6UL_PAD_NAND_DATA04__EIM_AD12           0x000010E9
				MX6UL_PAD_NAND_DATA05__EIM_AD13           0x000010E9
				MX6UL_PAD_NAND_DATA06__EIM_AD14           0x000010E9
				MX6UL_PAD_NAND_DATA07__EIM_AD15           0x000010E9
				MX6UL_PAD_NAND_DQS__EIM_WAIT              0x000010E9
				MX6UL_PAD_NAND_WP_B__EIM_BCLK             0x000010E9
			>;
		};

		pinctrl_adc1: adc1grp {
			fsl,pins = <
				/* BATTERY VOLTAGE */
				MX6UL_PAD_GPIO1_IO05__GPIO1_IO05          0x000000B0
			>;
		};

		pinctrl_buzzer1: buzzer1grp {
			fsl,pins = <
				MX6UL_PAD_GPIO1_IO08__PWM1_OUT            0x000110B0
			>;
		};

		pinctrl_enet1: enet1grp {
			fsl,pins = <
				MX6UL_PAD_ENET1_RX_DATA0__ENET1_RDATA00   0x0001B0B0
				MX6UL_PAD_ENET1_RX_DATA1__ENET1_RDATA01   0x0001B0B0
				MX6UL_PAD_ENET1_RX_EN__ENET1_RX_EN        0x0001B0B0
				MX6UL_PAD_ENET1_RX_ER__ENET1_RX_ER        0x0001B0B0
				MX6UL_PAD_ENET1_TX_CLK__ENET1_REF_CLK1    0x400010A9
				MX6UL_PAD_ENET1_TX_DATA0__ENET1_TDATA00   0x0001B0B0
				MX6UL_PAD_ENET1_TX_DATA1__ENET1_TDATA01   0x0001B0B0
				MX6UL_PAD_ENET1_TX_EN__ENET1_TX_EN        0x0001B0B0
			>;
		};

		pinctrl_mdio0: mdio0grp {
			fsl,pins = <
				MX6UL_PAD_GPIO1_IO07__ENET1_MDC           0x0001B0B0
				MX6UL_PAD_GPIO1_IO06__ENET1_MDIO          0x0001F829
			>;
		};

		pinctrl_ethphy0: ethphy0grp {
			fsl,pins = <
				/* ETH 10/100 PHY (D2, Micrel KSZ8081RNB) RESET */
				MX6UL_PAD_NAND_CE1_B__GPIO4_IO14          0x000010B0 /* PHY_nRST */
			>;
		};

		pinctrl_kpp: kppgrp {
			fsl,pins = <
				MX6UL_PAD_ENET2_RX_DATA0__KPP_ROW04       0x0001b010
				MX6UL_PAD_ENET2_RX_DATA1__KPP_COL04       0x000110b0
				MX6UL_PAD_ENET2_RX_EN__KPP_ROW05          0x0001b010
				MX6UL_PAD_ENET2_RX_ER__KPP_COL07          0x000110b0
				MX6UL_PAD_ENET2_TX_CLK__KPP_ROW07         0x0001b010
				MX6UL_PAD_ENET2_TX_DATA0__KPP_COL05       0x000110b0
				MX6UL_PAD_ENET2_TX_DATA1__KPP_ROW06       0x0001b010
				MX6UL_PAD_ENET2_TX_EN__KPP_COL06          0x000110b0
				MX6UL_PAD_NAND_RE_B__KPP_ROW00            0x0001b010
				MX6UL_PAD_NAND_WE_B__KPP_COL00            0x000110b0
			>;
		};

		pinctrl_lcd: lcdgrp {
			fsl,pins = <
				/* LCD */
				MX6UL_PAD_LCD_CLK__GPIO3_IO00             0x000010B0 /* DB0 */
				MX6UL_PAD_LCD_ENABLE__GPIO3_IO01          0x000010B0 /* DB1 */
				MX6UL_PAD_LCD_HSYNC__GPIO3_IO02           0x000010B0 /* DB2 */
				MX6UL_PAD_LCD_VSYNC__GPIO3_IO03           0x000010B0 /* DB3 */
				MX6UL_PAD_LCD_DATA00__GPIO3_IO05          0x000010B0 /* DB4 */
				MX6UL_PAD_LCD_DATA01__GPIO3_IO06          0x000010B0 /* DB5 */
				MX6UL_PAD_LCD_DATA02__GPIO3_IO07          0x000010B0 /* DB6 */
				MX6UL_PAD_LCD_DATA03__GPIO3_IO08          0x000010B0 /* DB7 */
				MX6UL_PAD_LCD_DATA04__GPIO3_IO09          0x000010B0 /* A0 */
				MX6UL_PAD_LCD_DATA05__GPIO3_IO10          0x000010B0 /* RD/WR */
				MX6UL_PAD_LCD_DATA06__GPIO3_IO11          0x000010B0 /* E */
				MX6UL_PAD_LCD_DATA07__GPIO3_IO12          0x000010B0 /* CS */
				MX6UL_PAD_LCD_DATA09__GPIO3_IO14          0x000010B0 /* RESET */
			>;
		};

		pinctrl_eeprom1: eeprom1grp {
			fsl,pins = <
				/*
				 * EEPROM write protect
				 *
				 * this pin is not consumed by the eeprom driver,
				 * but we can use it from userspace
				 */
				MX6UL_PAD_LCD_DATA10__GPIO3_IO15          0x000010B0
			>;
		};

		pinctrl_ecspi1: ecspi1grp {
			fsl,pins = <
		             /*
		              * This pin shoud be muxed in a separate group so that we can
		              * use it as a gpio. See below.
		              *
			      * MX6UL_PAD_LCD_DATA21__ECSPI1_SS0          0x000010B0
			      */
				MX6UL_PAD_LCD_DATA20__ECSPI1_SCLK         0x000010B0
				MX6UL_PAD_LCD_DATA22__ECSPI1_MOSI         0x000010B0
				MX6UL_PAD_LCD_DATA23__ECSPI1_MISO         0x000010B0
			>;
		};

		pinctrl_ecp5_spi_cs: ecp5-spi-cs-grp {
			/*
			 *  Here we mux PAD_UART4_RX_DATA (H17) to GPIO1_IO29 in place
			 *  of ECSPI2_SS0 to be able to drive CS. This is a workaround for
			 *  Lattice ECP5 FPGA Slave SPI programming algo, see Lattice
			 *  Programming Tools User Guide, ch. Slave SPI Embedded.
			 */
			fsl,pins = <
				MX6UL_PAD_LCD_DATA21__GPIO3_IO26          0x000010B0
			>;
		};

		pinctrl_ecp5: ecp5grp {
			fsl,pins = <
				/* FPGA ECP5 SysConfig */
				MX6UL_PAD_LCD_DATA16__GPIO3_IO21          0x000010B0 /* DONE */
				MX6UL_PAD_LCD_DATA17__GPIO3_IO22          0x000010B0 /* INITN */
				MX6UL_PAD_LCD_DATA18__GPIO3_IO23          0x000010B0 /* PROGRAMN */
			>;
		};

		pinctrl_wdog: wdoggrp {
			fsl,pins = <
				MX6UL_PAD_LCD_RESET__WDOG1_WDOG_ANY       0x000030B0
			>;
		};

                pinctrl_i2c1: i2c1grp {
			fsl,pins = <
				MX6UL_PAD_UART4_RX_DATA__I2C1_SDA         0x4001B8B1
				MX6UL_PAD_UART4_TX_DATA__I2C1_SCL         0x4001B8B1
			>;
		};

                pinctrl_i2c2: i2c2grp {
			fsl,pins = <
				MX6UL_PAD_UART5_RX_DATA__I2C2_SDA         0x4001B8B1
				MX6UL_PAD_UART5_TX_DATA__I2C2_SCL         0x4001B8B1
			>;
		};

		/* System console */
		pinctrl_uart1: uart1grp {
			fsl,pins = <
				MX6UL_PAD_UART1_RX_DATA__UART1_DCE_RX     0x0001B0B1
				MX6UL_PAD_UART1_TX_DATA__UART1_DCE_TX     0x0001B0B1
			>;
		};

		/* WLAN ESP8266 UART */
		pinctrl_uart2: uart2grp {
			fsl,pins = <
				MX6UL_PAD_UART2_RX_DATA__UART2_DCE_RX     0x0001B0B1
				MX6UL_PAD_UART2_TX_DATA__UART2_DCE_TX     0x0001B0B1
			>;
		};

		/* STM32 MCU UART */
		pinctrl_uart3: uart3grp {
			fsl,pins = <
				MX6UL_PAD_UART3_RX_DATA__UART3_DCE_RX     0x0001B0B1
				MX6UL_PAD_UART3_TX_DATA__UART3_DCE_TX     0x0001B0B1
			>;
		};

		pinctrl_usdhc1: usdhc1grp {
			fsl,pins = <
				MX6UL_PAD_SD1_CLK__USDHC1_CLK             0x00017059
				MX6UL_PAD_SD1_CMD__USDHC1_CMD             0x00010059
				MX6UL_PAD_SD1_DATA0__USDHC1_DATA0         0x00017059
				MX6UL_PAD_SD1_DATA1__USDHC1_DATA1         0x00017059
				MX6UL_PAD_SD1_DATA2__USDHC1_DATA2         0x00017059
				MX6UL_PAD_SD1_DATA3__USDHC1_DATA3         0x00017059
			>;
		};

		pinctrl_usbotg1: usbotg1grp {
			fsl,pins = <
				MX6UL_PAD_GPIO1_IO00__ANATOP_OTG1_ID      0x00017059
				MX6UL_PAD_GPIO1_IO01__USB_OTG1_OC         0x000010B0

			>;
		};

		pinctrl_usbotg2: usbotg2grp {
			fsl,pins = <
				MX6UL_PAD_GPIO1_IO03__USB_OTG2_OC         0x000010B0
			>;
		};

		pinctrl_fpga0_pwr: fpga0-pwr-grp {
			fsl,pins = <
				MX6UL_PAD_NAND_ALE__GPIO4_IO10            0x000010B0 /* PWR_FPGA_EN */
			>;
		};
        };
};

&iomuxc_snvs {
	stcmtk-lan-tester {
		pinctrl_dvfs: dvfsgrp {
			fsl,pins = <
				/* GPIO_DVFS */
				MX6ULL_PAD_SNVS_TAMPER3__GPIO5_IO03        0x000110A0
			>;
		};
	};
};

&adc1 {
	pinctrl-names = "default";
	pinctrl-0 = <&pinctrl_adc1>;
	vref-supply = <&reg_vref_adc>;
	num-channels = <6>;
	status = "okay";
	#io-channel-cells = <1>;
};

&weim {
	pinctrl-names = "default";
	pinctrl-0 = <&pinctrl_weim>;
	/* Open EIM clock gate */
	clocks = <&clks IMX6UL_CLK_EIM>;
	assigned-clocks = <&clks IMX6UL_CLK_EIM_SLOW_SEL>, <&clks IMX6UL_CLK_EIM_SLOW_PODF>;
	/* Choose PLL2 PFD2 clock source 400 MHz... */
	assigned-clock-parents = <&clks IMX6UL_CLK_PLL2_PFD2>;
	/* ... and divide it by 8 */
	assigned-clock-rates = <0>, <50000000>;
	status = "okay";
	#address-cells = <2>;
	#size-cells = <1>;
	ranges = <0 0 0x50000000 0x08000000>; /* We are using only CS0 */
	eim-continuous-bclk;

	fpga0: fpga@0,0 {
		compatible = "stcmtk,grif-fpga-mgr";
		#address-cells = <2>;
		#size-cells = <1>;
		reg = <0 0x0 0x00020000>; /* 16-bit address range but x2 since
					     EIM addresses are words, not bytes */
		fpga-name = "Main FPGA";
		/* CS0 Configuration registers:
		    CSxGCR1, CSxGCR2, CSxRCR1,
		    CSxRCR2, CSxWCR1, CSxWCR2*/
		fsl,weim-cs-timing = <0x0111008f 0x00001000 0x02000000
				      0x00000000 0x01000000 0x00000000>;
		ecp5-fpga-mgr = <&ecp5>;
		vcc-supply = <&reg_fpga_vcc>;
	};

	fpga-io {
		compatible = "stcmtk,grif-io";
		target-fpga = <&fpga0>;
	};

	fpga-net {
		compatible = "stcmtk,grif-net";
		target-fpga = <&fpga0>;

		mac-address = [00 21 CE 40 00 01];
		port-num = <0>;
		interrupt-parent = <&gpio3>;
		interrupts = <17 IRQ_TYPE_LEVEL_HIGH>,
				<18 IRQ_TYPE_LEVEL_HIGH>,
				<19 IRQ_TYPE_LEVEL_HIGH>,
				<20 IRQ_TYPE_LEVEL_HIGH>;

		phy-handle = <&ethphy2>;
		phy-mode = "rgmii-id";

		mdio {
			#address-cells = <1>;
			#size-cells = <0>;

			ethphy2: ethernet-phy@0 {
				compatible = "ethernet-phy-ieee802.3-c22";
				reg = <0>;
			};
		};
	};
};

&pwm1 {
	pinctrl-names = "default";
	pinctrl-0 = <&pinctrl_buzzer1>;
	status = "okay";
};

/* System console */
&uart1 {
	pinctrl-names = "default";
	pinctrl-0 = <&pinctrl_uart1>;
	status = "okay";
};

/* WLAN ESP8266 UART */
&uart2 {
	pinctrl-names = "default";
	pinctrl-0 = <&pinctrl_uart2>;
	status = "okay";
};

/* STM32 MCU UART */
&uart3 {
	pinctrl-names = "default";
	pinctrl-0 = <&pinctrl_uart3>;
	status = "okay";
};

&usbotg1 {
	pinctrl-names = "default";
	pinctrl-0 = <&pinctrl_usbotg1>;
	dr_mode = "otg";
	srp-disable;
	hnp-disable;
	adp-disable;
	status = "okay";
	disable-overcurrent;
};

&usbphy1 {
	tx-d-cal = <0x5>;
};

&usbotg2 {
	pinctrl-names = "default";
	pinctrl-0 = <&pinctrl_usbotg2>;
	dr_mode = "host";
	status = "okay";
	disable-overcurrent;
};

&usbphy2 {
	tx-d-cal = <0x5>;
};

&usdhc1 {
	pinctrl-names = "default";
	pinctrl-0 = <&pinctrl_usdhc1>;
	vmmc-supply = <&reg_sd1>;
	non-removable;
	no-1-8-v;
	non-removable;
	keep-power-in-suspend;
	status = "okay";
};

&wdog1 {
	pinctrl-names = "default";
	pinctrl-0 = <&pinctrl_wdog>;
	/*
	 *  Enable WDOG1_B and WDOG1_ANY external signals assertion on wdog1
	 *  timeout.
	 */
	fsl,ext-reset-output;
};

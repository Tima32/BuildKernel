/dts-v1/;

#include "m720.dtsi"

/ {
	leds {
		green_led {
			pinctrl-names = "default";
			pinctrl-0 = <&pinctrl_green_led>;
			label = "stat_green";
			linux,default-trigger = "heartbeat";
			gpios = <&gpio3 20 GPIO_ACTIVE_LOW>;
			default-state = "off";
		};

		red_led {
			pinctrl-names = "default";
			pinctrl-0 = <&pinctrl_red_led>;
			label = "stat_red";
			linux,default-trigger = "none";
			gpios = <&gpio3 21 GPIO_ACTIVE_LOW>;
			default-state = "off";
			panic-indicator;
		};

		service_led {
			pinctrl-names = "default";
			pinctrl-0 = <&pinctrl_service_led>;
			label = "service-tool:status";
			linux,default-trigger = "default-on";
			gpios = <&gpio5 10 GPIO_ACTIVE_HIGH>;
			default-state = "on";
		};
	};

	key {
		compatible = "gpio-keys";

		alarm {
			pinctrl-names = "default";
			pinctrl-0 = <&pinctrl_alarm>;
			label = "cpu-alarm";
			linux,code = <KEY_WAKEUP>;
			gpios = <&gpio5 0 GPIO_ACTIVE_HIGH>;
			wakeup-source;
		};
	};

	fpgaio: fpga-io {
		compatible = "stcmtk,grif-io";
		target-fpga = <&fpga0>;
		status = "okay";
	};

	ecp5-hwmon {
		compatible = "lattice,ecp5-hwmon";
		target-fpga = <&fpga0>;
		label = "internal ECP5 temperature";
	};

	phc_mux: grif-phc-mux {
                compatible = "stcmtk,phc-mux";
                target-fpga = <&fpga0>;
        };
};

&reg_arm {
	vin-supply = <&pmic_cpu_soc_reg>;
	regulator-allow-bypass;
};

&reg_soc {
	vin-supply = <&pmic_cpu_soc_reg>;
	regulator-allow-bypass;
};

&reg_3p0 {
	vin-supply = <&pmic_cpu_snvs_reg>;
	regulator-allow-bypass;
};

&ecspi1 {
	pinctrl-names = "default";
	pinctrl-0 = <&pinctrl_ecspi1>;
	clock-frequency = <20000000>;
	status = "okay";
	fsl,spi-num-chipselects = <2>;
	/* Actually there is no CS muxed to the pin  because we need to
	 * drive CS manually from the Lattice ECP5 FPGA driver
	 * see pinmux definition for details
	 */
	cs-gpios = <0 0>;

	ecp5: ecp5@0 {
		pinctrl-names = "default";
		pinctrl-0 = <&pinctrl_ecp5 &pinctrl_ecp5_spi_cs>;
		compatible = "lattice,ecp5-fpga-mgr";
		status = "okay";
		spi-max-frequency = <20000000>;
		reg = <0>;
		cs-gpios = <&gpio3 26 GPIO_ACTIVE_LOW>;
		done-gpios = <&gpio3 2 GPIO_ACTIVE_HIGH>;
		programn-gpios = <&gpio3 4 GPIO_ACTIVE_LOW>;
		initn-gpios = <&gpio3 3 GPIO_ACTIVE_LOW>;
	};

	fpga0: fpga@1 {
		compatible = "stcmtk,grif-fpga-mgr-spi";
		fpga-name = "Main FPGA";
		spi-max-frequency = <20000000>;
		reg = <1>;
		status = "okay";
		cs-gpios = <&gpio3 26 GPIO_ACTIVE_HIGH>;
		ecp5-fpga-mgr = <&ecp5>;
		vcc-supply = <&pmic_fpga_core_reg>;
		vcc-tra-supply = <&pmic_fpga_tra_reg>;
		vcc-aux-supply = <&pmic_fpga_aux_reg>;
	};
};

/* System bus */
&i2c3 {
	pmic: pfuze3000@8 {
		regulators {
			/* 1V275_IMX_PMIC - test point P4 */
			pmic_cpu_soc_reg: sw1a {
				regulator-name = "pmic_cpu_soc_in";
				regulator-min-microvolt = <900000>;
				regulator-max-microvolt = <1425000>;
				regulator-boot-on;
				regulator-always-on;
			};

			/* CPU_HIGH_IN_3.3V_PMIC */
			pmic_cpu_high_in_reg: vldo3 {
				regulator-name = "pmic_cpu_high_in";
				regulator-min-microvolt = <2800000>;
				regulator-max-microvolt = <3300000>;
				regulator-boot-on;
				regulator-always-on;
			};

			/* CPU_SNVS_IN_3.3V_PMIC */
			pmic_cpu_snvs_reg: vsnvs {
				regulator-name = "pmic_cpu_snvs";
				regulator-min-microvolt = <3000000>;
				regulator-max-microvolt = <3000000>;
				regulator-boot-on;
				regulator-always-on;
			};

			/* 1V35_DDR_PMIC - test point P2 */
			pmic_ddr_reg: sw3 {
				regulator-name = "ddr_supply";
				regulator-min-microvolt = <1350000>;
				regulator-max-microvolt = <1350000>;
				regulator-boot-on;
				regulator-always-on;
			};

			/* VREF_DDR_PMIC - test point P1 */
			pmic_ddr_vref_reg: vrefddr {
				regulator-name = "ddr_ref";
				regulator-boot-on;
				regulator-always-on;
			};

			/* 3V3_IO */
			pmic_io_reg: v33 {
				regulator-name = "io_supply";
				regulator-min-microvolt = <2850000>;
				regulator-max-microvolt = <3300000>;
				regulator-boot-on;
				regulator-always-on;
			};

			/* 3V3_EMMC_PMIC */
			pmic_emmc_reg: vccsd {
				regulator-name = "emmc_supply";
				regulator-min-microvolt = <2850000>;
				regulator-max-microvolt = <3300000>;
				regulator-always-on;
			};

			/* 5V_PMIC - test point P3 */
			pmic_usb_reg: swbst {
				regulator-name = "cpu_usb";
				regulator-min-microvolt = <5000000>;
				regulator-max-microvolt = <5150000>;
				regulator-boot-on;
				/* CPU USB VBUS line does not connected to VBUS
				 * line on SSFP USB OTG port. So USB OTG can't
				 * be supplied from HOST in device mode. This
				 * regulator provides 5V supply for CPU VBUS and
				 * has to be always on to prevent USB OTG
				 * glitches. */
				regulator-always-on;
			};

			/* 1V1_FPGA - test point P7 */
			pmic_fpga_core_reg: sw1b {
				regulator-name = "fpga_vcc_vcca";
				regulator-min-microvolt = <1050000>;
				regulator-max-microvolt = <1150000>;
				regulator-boot-on;
			};

			/* Not connected */
			vldo4 {
				regulator-name = "not_connected";
				regulator-min-microvolt = <1800000>;
				regulator-max-microvolt = <3300000>;
			};
		};
	};
};

	/* NT25L90 laser driver bus */
&i2c4 {
	clock-frequency = <400000>;
	pinctrl-names = "default";
	pinctrl-0 = <&pinctrl_i2c4>;
	status = "okay";
};

&iomuxc {
	stcmtk-smart-sfp {
		pinctrl_hog_1: hoggrp-1 {
			fsl,pins = <
				/* ???: Not used by drivers, only for exporting to userspace */
				MX6UL_PAD_GPIO1_IO02__GPIO1_IO02 	0x000010B0 /* SDMA INT */
				/*MX6UL_PAD_GPIO1_IO02__SDMA_EXT_EVENT00  0x000010B0*/ /* SDMA INT */
			>;
		};

		pinctrl_net1: net1grp {
			fsl,pins = <
				MX6UL_PAD_GPIO1_IO03__GPIO1_IO03	0x000010B0 /* FPGA_INT 0 */
				MX6UL_PAD_LCD_DATA13__GPIO3_IO18	0x000010B0 /* FPGA_INT 1 */
				MX6UL_PAD_GPIO1_IO05__GPIO1_IO05	0x000010B0 /* FPGA_INT 2 */
			>;
		};

		pinctrl_net2: net2grp {
			fsl,pins = <
				MX6UL_PAD_UART2_RTS_B__GPIO1_IO23	0x000010B0 /* FPGA_INT 3 */
				MX6UL_PAD_UART2_CTS_B__GPIO1_IO22	0x000010B0 /* FPGA_INT 4 */
				MX6UL_PAD_GPIO1_IO08__GPIO1_IO08	0x000010B0 /* FPGA_INT 5 */
			>;
		};

		pinctrl_green_led: led1grp {
			fsl,pins = <
				MX6UL_PAD_LCD_DATA15__GPIO3_IO20	0x000010B0
			>;
		};

		pinctrl_red_led: led2grp {
			fsl,pins = <
				MX6UL_PAD_LCD_DATA16__GPIO3_IO21	0x000010B0
			>;
		};

		pinctrl_ecspi1: ecspi1grp {
			fsl,pins = <
			     /*
			      * This pin shoud be muxed in a separate group so that we can
			      * use it as a gpio. See below.
			      *
			      * MX6UL_PAD_LCD_DATA21__ECSPI1_SS0	0x000010A8
			      */
				MX6UL_PAD_LCD_DATA20__ECSPI1_SCLK	0x000010A8
				MX6UL_PAD_LCD_DATA22__ECSPI1_MOSI	0x000010A8
				MX6UL_PAD_LCD_DATA23__ECSPI1_MISO	0x000010A8
			>;
		};

		pinctrl_ecp5_spi_cs: ecp5-spi-cs-grp {
			/*
			 *  Here we mux PAD_LCD_DATA21__ECSPI1_SS0 (C16) to GPIO3_IO26 in place
			 *  of ECSPI1_SS0 to be able to drive CS. This is a workaround for
			 *  Lattice ECP5 FPGA Slave SPI programming algo, see Lattice
			 *  Programming Tools User Guide, ch. Slave SPI Embedded.
			 */
			fsl,pins = <
				MX6UL_PAD_LCD_DATA21__GPIO3_IO26	0x000010A8
			>;
		};

		pinctrl_ecp5: ecp5grp {
			fsl,pins = <
				MX6UL_PAD_LCD_HSYNC__GPIO3_IO02		0x000010B0 /* CPU_DONE */
				MX6UL_PAD_LCD_VSYNC__GPIO3_IO03		0x000010B0 /* CPU_INITN */
				MX6UL_PAD_LCD_RESET__GPIO3_IO04		0x000010B0 /* CPU_PROGRAMN */
			>;
		};

		pinctrl_i2c1: i2c1grp {
			fsl,pins = <
				MX6UL_PAD_UART4_RX_DATA__I2C1_SDA	0x4001B8B1
				MX6UL_PAD_UART4_TX_DATA__I2C1_SCL	0x4001B8B1
			>;
		};

		pinctrl_i2c3: i2c3grp {
			fsl,pins = <
				MX6UL_PAD_LCD_DATA01__I2C3_SCL		0x4001B8B1
				MX6UL_PAD_LCD_DATA00__I2C3_SDA		0x4001B8B1
			>;
		};

		pinctrl_i2c4: i2c4grp {
			fsl,pins = <
				MX6UL_PAD_LCD_DATA03__I2C4_SCL		0x4001B8B1
				MX6UL_PAD_LCD_DATA02__I2C4_SDA		0x4001B8B1
			>;
		};

		pinctrl_uart1: uart1grp {
			fsl,pins = <
				MX6UL_PAD_UART1_RX_DATA__UART1_DCE_RX	0x000010B0
				MX6UL_PAD_UART1_TX_DATA__UART1_DCE_TX	0x000010B0
			>;
		};

		pinctrl_emmc: emmcgrp {
			fsl,pins = <
				MX6UL_PAD_SD1_CMD__USDHC1_CMD		0x17059
				MX6UL_PAD_SD1_CLK__USDHC1_CLK		0x10059
				MX6UL_PAD_SD1_DATA0__USDHC1_DATA0	0x17059
				MX6UL_PAD_SD1_DATA1__USDHC1_DATA1	0x17059
				MX6UL_PAD_SD1_DATA2__USDHC1_DATA2	0x17059
				MX6UL_PAD_SD1_DATA3__USDHC1_DATA3	0x17059
				MX6UL_PAD_NAND_READY_B__USDHC1_DATA4	0x17059
				MX6UL_PAD_NAND_CE0_B__USDHC1_DATA5	0x17059
				MX6UL_PAD_NAND_CE1_B__USDHC1_DATA6	0x17059
				MX6UL_PAD_NAND_CLE__USDHC1_DATA7	0x17059
			>;
		};

		pinctrl_emmc_100: emmc_100grp {
			fsl,pins = <
				MX6UL_PAD_SD1_CMD__USDHC1_CMD		0x170b9
				MX6UL_PAD_SD1_CLK__USDHC1_CLK		0x100b9
				MX6UL_PAD_SD1_DATA0__USDHC1_DATA0	0x170b9
				MX6UL_PAD_SD1_DATA1__USDHC1_DATA1	0x170b9
				MX6UL_PAD_SD1_DATA2__USDHC1_DATA2	0x170b9
				MX6UL_PAD_SD1_DATA3__USDHC1_DATA3	0x170b9
				MX6UL_PAD_NAND_READY_B__USDHC1_DATA4	0x170b9
				MX6UL_PAD_NAND_CE0_B__USDHC1_DATA5	0x170b9
				MX6UL_PAD_NAND_CE1_B__USDHC1_DATA6	0x170b9
				MX6UL_PAD_NAND_CLE__USDHC1_DATA7	0x170b9
			>;
		};

		pinctrl_emmc_200: emmc_200grp {
			fsl,pins = <
				MX6UL_PAD_SD1_CMD__USDHC1_CMD		0x170f9
				MX6UL_PAD_SD1_CLK__USDHC1_CLK		0x100f9
				MX6UL_PAD_SD1_DATA0__USDHC1_DATA0	0x170f9
				MX6UL_PAD_SD1_DATA1__USDHC1_DATA1	0x170f9
				MX6UL_PAD_SD1_DATA2__USDHC1_DATA2	0x170f9
				MX6UL_PAD_SD1_DATA3__USDHC1_DATA3	0x170f9
				MX6UL_PAD_NAND_READY_B__USDHC1_DATA4	0x170f9
				MX6UL_PAD_NAND_CE0_B__USDHC1_DATA5	0x170f9
				MX6UL_PAD_NAND_CE1_B__USDHC1_DATA6	0x170f9
				MX6UL_PAD_NAND_CLE__USDHC1_DATA7	0x170f9
			>;
		};

		pinctrl_emmc_rst: emmc_rst_grp {
			fsl,pins = <
				MX6UL_PAD_GPIO1_IO04__USDHC1_RESET_B	0x17059
			/*	MX6UL_PAD_GPIO1_IO04__GPIO1_IO4		0x17059 */
			>;
		};

		pinctrl_weim: weimgrp {
			fsl,pins = <
				MX6UL_PAD_CSI_DATA00__EIM_AD00		0x000010E9
				MX6UL_PAD_CSI_DATA01__EIM_AD01		0x000010E9
				MX6UL_PAD_CSI_DATA02__EIM_AD02		0x000010E9
				MX6UL_PAD_CSI_DATA03__EIM_AD03		0x000010E9
				MX6UL_PAD_CSI_DATA04__EIM_AD04		0x000010E9
				MX6UL_PAD_CSI_DATA05__EIM_AD05		0x000010E9
				MX6UL_PAD_CSI_DATA06__EIM_AD06		0x000010E9
				MX6UL_PAD_CSI_DATA07__EIM_AD07		0x000010E9
				MX6UL_PAD_CSI_HSYNC__EIM_LBA_B		0x000010E9
				MX6UL_PAD_CSI_MCLK__EIM_CS0_B		0x000010E9
				MX6UL_PAD_CSI_PIXCLK__EIM_OE		0x000010E9
				MX6UL_PAD_CSI_VSYNC__EIM_RW		0x000010E9
				MX6UL_PAD_NAND_DATA00__EIM_AD08		0x000010E9
				MX6UL_PAD_NAND_DATA01__EIM_AD09		0x000010E9
				MX6UL_PAD_NAND_DATA02__EIM_AD10		0x000010E9
				MX6UL_PAD_NAND_DATA03__EIM_AD11		0x000010E9
				MX6UL_PAD_NAND_DATA04__EIM_AD12		0x000010E9
				MX6UL_PAD_NAND_DATA05__EIM_AD13		0x000010E9
				MX6UL_PAD_NAND_DATA06__EIM_AD14		0x000010E9
				MX6UL_PAD_NAND_DATA07__EIM_AD15		0x000010E9
				MX6UL_PAD_NAND_DQS__EIM_WAIT		0x000010E9
				MX6UL_PAD_NAND_WP_B__EIM_BCLK		0x000010E9
			>;
		};

		pinctrl_usbotg1: usbotg1grp {
			fsl,pins = <
				MX6UL_PAD_UART3_TX_DATA__ANATOP_OTG1_ID 0x00017059
			>;
		};

		pinctrl_userswitch: userswitchgrp {
			fsl,pins = <
				MX6UL_PAD_LCD_DATA10__GPIO3_IO15	0x000010B0
				MX6UL_PAD_LCD_DATA11__GPIO3_IO16	0x000010B0
			>;
		};
	};
};

&iomuxc_snvs {
	stcmtk-smart-sfp-snvs {
		pinctrl_service_led: snvs_service_led_grp {
			fsl,pins = <
				MX6UL_PAD_BOOT_MODE0__GPIO5_IO10	0x000128A0
			>;

		};

		pinctrl_alarm: snvs_alarm_grp {
			fsl,pins = <
				MX6UL_PAD_SNVS_TAMPER0__GPIO5_IO00	0x000110A0
			>;

		};
	};
};

&weim {
	fpga_net0: fpga-net0 {
		compatible = "stcmtk,grif-net";
		target-fpga = <&fpga0>;
		pinctrl-names = "default";
		pinctrl-0 = <&pinctrl_net1>;
		reg = <0 0x4000 0x8000>; /* EIM addr range for CPUBUF (port 0) */

		/* CS0 Configuration registers:
			CSxGCR1, CSxGCR2, CSxRCR1,
			CSxRCR2, CSxWCR1, CSxWCR2 */
		fsl,weim-cs-timing = <0x511104AF 0x00001000 0x04000000
				      0x00000000 0x01000000 0x00000000>;

		mac-address = [02 00 00 44 00 02];
		port-num = <0>;
		interrupts-extended = <&gpio1 3  IRQ_TYPE_EDGE_RISING>, /* FPGA_INT0 - TX */
				      <&gpio3 18 IRQ_TYPE_LEVEL_HIGH>; /* FPGA_INT1 - RX */

		phc-mux = <&phc_mux>;
	};

	fpga-net1 {
		compatible = "stcmtk,grif-net";
		target-fpga = <&fpga0>;
		pinctrl-names = "default";
		pinctrl-0 = <&pinctrl_net2>;
		reg = <0 0xc000 0x8000>; /* EIM addr range for CPUBUF (port 1) */

		/* CS0 Configuration registers:
			CSxGCR1, CSxGCR2, CSxRCR1,
			CSxRCR2, CSxWCR1, CSxWCR2 */
		fsl,weim-cs-timing = <0x511104AF 0x00001000 0x04000000
				      0x00000000 0x01000000 0x00000000>;

		mac-address = [02 00 00 44 00 03];
		port-num = <1>;
		interrupts-extended = <&gpio1 23 IRQ_TYPE_EDGE_RISING>, /* FPGA_INT3 - TX */
				      <&gpio1 22 IRQ_TYPE_LEVEL_HIGH>; /* FPGA_INT4 - RX */

		phy-mode = "internal";
		phc-mux = <&phc_mux>;

		link-gpios = <&gpio1 8 GPIO_ACTIVE_HIGH>; /* FPGA_INT5 - Link state */

		fixed-link {
			speed = <1000>;
			full-duplex;
		};
	};

	phc0: grif-phc@0 {
                compatible = "stcmtk,phc";
                stcmtk,port-num = <0>;
                target-fpga = <&fpga0>;
                bus-type = "eim";
                reg = <0 0x0 0x1e>, /* CR reg port 0 */
                      <0 0x3c 0xc>, /* SR reg port 0 */
                      <0 0x0 0x1e>,
                      <0 0x1e 0xc>;
                reg-names = "reg-cr", "reg-sr",
                            "alt-reg-cr", "alt-reg-sr";
        };

	phc1: grif-phc@1 {
                compatible = "stcmtk,phc";
                stcmtk,port-num = <1>;
                target-fpga = <&fpga0>;
                bus-type = "eim";
                reg = <0 0x1e 0x1e>, /* CR reg port 1 */
                      <0 0x48 0xc>,  /* SR reg port 1 */
                      <0 0x0 0x1e>,
                      <0 0x1e 0xc>;
                reg-names = "reg-cr", "reg-sr",
                            "alt-reg-cr", "alt-reg-sr";
        };
};

&usbotg1 {
	pinctrl-names = "default";
	pinctrl-0 = <&pinctrl_usbotg1>;
	/* CPU USB VBUS line does not connected to VBUS line on SSFP USB OTG
	 * port. So "vbus-supply" line can't supply external USB device in host
	 * mode and USB driver doesn't have to handle PMIC VBUS supplier. */ 
	/* vbus-supply = <&pmic_usb_reg>; */
	dr_mode = "otg";
	srp-disable;
	hnp-disable;
	adp-disable;
	disable-overcurrent;
	status = "okay";
};

&usdhc1 {
	pinctrl-names = "default", "state_100mhz", "state_200mhz";
	pinctrl-0 = <&pinctrl_emmc &pinctrl_emmc_rst>;
	pinctrl-1 = <&pinctrl_emmc_100 &pinctrl_emmc_rst>;
	pinctrl-2 = <&pinctrl_emmc_200 &pinctrl_emmc_rst>;
	vmmc-supply = <&pmic_emmc_reg>;
	bus-width = <8>;
	no-1-8-v;
	non-removable;
	status = "okay";
};
